from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import nltk
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
import string
import os

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã NLTK –∑–∞–≥—Ä—É–∂–µ–Ω—ã
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

try:
    nltk.data.find('tokenizers/punkt_tab')
except LookupError:
    nltk.download('punkt_tab')

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///chatbot.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
CORS(app)

db = SQLAlchemy(app)
ps = PorterStemmer()
stop_words = set(stopwords.words('english'))

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(500))
    answer = db.Column(db.String(1000))
    variations = db.Column(db.JSON)

def preprocess_text(text):
    try:
        tokens = nltk.word_tokenize(text.lower())
        tokens = [ps.stem(t) for t in tokens if t not in stop_words and t not in string.punctuation]
        return set(tokens)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return set()

def find_best_answer(question):
    processed = preprocess_text(question)
    
    questions = Question.query.all()
    best_match = None
    max_score = 0
    
    for q in questions:
        q_text_processed = preprocess_text(q.text)
        score = len(processed.intersection(q_text_processed))
        
        if q.variations:
            for variation in q.variations:
                var_processed = preprocess_text(variation)
                var_score = len(processed.intersection(var_processed))
                if var_score > score:
                    score = var_score
        
        if score > max_score:
            max_score = score
            best_match = q
    
    return best_match.answer if best_match and max_score >= 2 else None

@app.route('/api/chat', methods=['POST'])
def handle_message():
    data = request.json
    user_message = data['message'].strip().lower()
    
    if any(word in user_message for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å']):
        return jsonify({
            'answer': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ü–æ–ª–∏—Ç–µ—Ö –ü–µ—Ç—Ä–∞. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏.',
            'status': 'bot'
        })
    
    answer = find_best_answer(user_message)
    
    if answer:
        return jsonify({
            'answer': answer,
            'status': 'bot'
        })
    else:
        return jsonify({
            'answer': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. üòï\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n1. –£—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n2. –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é: 8 (812) 775-05-30\n3. –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email: abitur@spbstu.ru',
            'status': 'bot'
        })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with app.app_context():
    db.create_all()
    
    if not Question.query.first():
        questions = [
            {
                "text": "–ö–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –µ—Å—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ?",
                "answer": "–í –ü–æ–ª–∏—Ç–µ—Ö –ü–µ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã:\n\nüîπ –ì—É–º–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç (–õ–ò–ù–ì–í–ò–°–¢–ò–ö–ê, –ò–ó–î–ê–¢–ï–õ–¨–°–ö–û–ï –î–ï–õ–û, –†–ï–ö–õ–ê–ú–ê –ò –°–í–Ø–ó–ò –° –û–ë–©–ï–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ, –ü–°–ò–•–û–õ–û–ì–û-–ü–ï–î–ê–ì–û–ì–ò–ß–ï–°–ö–û–ï –û–ë–†–ê–ó–û–í–ê–ù–ò–ï, –Æ–†–ò–°–ü–†–£–î–ï–ù–¶–ò–Ø, –ó–ê–†–£–ë–ï–ñ–ù–û–ï –†–ï–ì–ò–û–ù–û–í–ï–î–ï–ù–ò–ï )\nüîπ –ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç (–î–∏–∑–∞–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ä–µ–¥—ã, –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –¢–µ—Ö–Ω–æ—Å—Ñ–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –î–∏–∑–∞–π–Ω, –î–∏–∑–∞–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ä–µ–¥—ã, –ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ,  )\nüîπ –ò–Ω—Å—Ç–∏—Ç—É—Ç –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–ë–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è –∏ –±–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è)\nüîπ–ò–Ω—Å—Ç–∏—Ç—É—Ç –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞  (–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤, –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤, –ú–µ—Ö–∞—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º, –ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞, –ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–∏–∫—Ä–æ—Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ)\n –∏ –¥—Ä. \n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.spbstu.ru/education/management-structure/institutions/",
                "variations": ["–ö–∞–∫–∏–µ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è?", "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã"]
            },
            {
                "text": "–ö–∞–∫–∏–µ –ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã?",
                "answer": "–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã 2024 –≥–æ–¥–∞:\n\nüíª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏: 245\n‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: 210",
                "variations": ["–°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ?", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –ï–ì–≠"]
            }
        ]
        
        for q in questions:
            new_question = Question(
                text=q['text'],
                answer=q['answer'],
                variations=q['variations']
            )
            db.session.add(new_question)
        
        db.session.commit()

if __name__ == '__main__':
    app.run(debug=True)